// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model EquipeMedica {
  id           String         @id @default(cuid())
  criadoEm     DateTime       @default(now())
  username     String         @unique
  password     String
  nomeCompleto String
  CRM          String?        @unique
  coren        String?        @unique
  email        String         @unique
  role         Role
  questionario Questionario[]

  @@map("equipe_medica")
}

model Paciente {
  id              String        @id @default(cuid())
  criadoEm        DateTime      @default(now())
  cpf             String        @unique
  username        String        @unique
  password        String
  nomeCompleto    String
  telefone        String        @unique
  email           String        @unique
  genero          String
  grauDeInstrucao String
  dataNascimento  DateTime
  idade           Int
  role            Role          @default(paciente)
  endereco        Endereco[]
  atendimento     Atendimento[]

  @@map("pacientes")
}

model Endereco {
  id         String   @id @default(cuid())
  rua        String
  numero     Int
  bairro     String
  cidade     String
  cep        String
  paciente   Paciente @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  pacienteId String   @unique

  @@map("enderecos")
}

model Questionario {
  id             String        @id @default(cuid())
  criadoEm       DateTime      @default(now())
  pergunta       String
  observacao     String
  peso           Int
  equipeMedica   EquipeMedica  @relation(references: [id], fields: [equipeMedicaId], onDelete: Cascade)
  equipeMedicaId String
  alternativas   Alternativa[]
  atendimento    Atendimento[]

  @@map("questionarios")
}

model Alternativa {
  id             String        @id @default(cuid())
  alternativa    String
  peso           Int
  questionario   Questionario  @relation(fields: [questionarioId], references: [id], onDelete: Cascade)
  questionarioId String
  atendimento    Atendimento[]

  @@map("alternativas")
}

model ChatMessage {
  id          String   @id @default(uuid())
  sala        String
  remetenteId String
  mensagem    String
  timestamp   DateTime @default(now())

  @@index([sala])
  @@map("chat_messages")
}

model Atendimento {
  id              String       @id @default(cuid())
  dataAtendimento DateTime     @default(now()) // data do atendimento
  tipoAtendimento String // tipo do antendimento: com o m√©dico ou com IA
  paciente        Paciente     @relation(fields: [pacienteId], references: [id]) // o paciente atendido
  pacienteId      String
  Alternativa     Alternativa  @relation(fields: [alternativaId], references: [id]) // a resposta do questionario
  alternativaId   String
  questionario    Questionario @relation(fields: [questionarioId], references: [id]) // a pergunta respondida
  questionarioId  String
  temperatura     String
  pressaoArterial String

  @@map("atendimentos")
}

enum Role {
  medico
  enfermeiro
  paciente
}
